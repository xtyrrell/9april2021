{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst API_URL = `https://graphql.contentful.com/content/v1/spaces/${process.env.CONTENTFUL_SPACE_ID}`;\nconst API_TOKEN = process.env.CONTENTFUL_ACCESS_TOKEN;\n\nasync function fetchCmsAPI(query) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers() {\n  const data = await fetchCmsAPI(`\n    {\n      speakerCollection {\n        items {\n          name\n          bio\n          title\n          slug\n          twitter\n          github\n          company\n          talk {\n            ... on Talk {\n              title\n              description\n            }\n          }\n          image {\n            url\n          }\n          imageSquare: image {\n            url\n          }\n        }\n      }\n    }\n  `);\n  return data.speakerCollection.items.map(speaker => speaker);\n}\nexport async function getAllStages() {\n  const data = await fetchCmsAPI(`\n    {\n      stageCollection {\n        items {\n            name\n            slug\n            stream\n            discord\n            scheduleCollection(limit: 0) {\n              items {\n                ... on Talk {\n                  title\n                  start\n                  end\n                  speakerCollection(limit: 5) {\n                    items {\n                      ... on Speaker {\n                      name\n                      slug\n                      image {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data.stageCollection.items.reduce((allStages, stage) => {\n    const schedule = stage.scheduleCollection.items.map(talk => _objectSpread({\n      speaker: talk.speakerCollection.items.map(speaker => speaker)\n    }, talk));\n    return [_objectSpread({\n      schedule\n    }, stage), ...(allStages || [])];\n  }, []);\n}\nexport async function getAllSponsors() {\n  const data = await fetchCmsAPI(`\n    {\n      companyCollection(order: tierRank_ASC, limit: 100) {\n        items {\n            sys {\n              id\n            }\n            name\n            description\n            slug\n            website\n            callToAction\n            callToActionLink\n            discord\n            youtubeSlug\n            tier\n            links \n            cardImage {\n              url\n            }\n            logo {\n              url\n            }\n        }\n      }\n    }\n  `);\n  return data.companyCollection.items.reduce((allSponsors, sponsor) => {\n    return [_objectSpread({\n      id: sponsor.sys.id\n    }, sponsor), ...(allSponsors || [])];\n  }, []);\n}\nexport async function getAllJobs() {\n  const data = await fetchCmsAPI(`\n    {\n      jobCollection(order: rank_ASC, limit: 100) {\n        items {\n            sys {\n              id\n            }\n            companyName\n            title\n            description\n            discord\n            link\n            rank\n        }\n      }\n    }\n  `);\n  return data.jobCollection.items.reduce((allJobs, job) => {\n    return [_objectSpread({\n      id: job.sys.id\n    }, job), ...(allJobs || [])];\n  }, []);\n}","map":{"version":3,"sources":["/Users/shai/9april2021/lib/cms-providers/contentful.ts"],"names":["API_URL","process","env","CONTENTFUL_SPACE_ID","API_TOKEN","CONTENTFUL_ACCESS_TOKEN","fetchCmsAPI","query","res","fetch","method","headers","Authorization","body","JSON","stringify","json","errors","console","error","Error","data","getAllSpeakers","speakerCollection","items","map","speaker","getAllStages","stageCollection","reduce","allStages","stage","schedule","scheduleCollection","talk","getAllSponsors","companyCollection","allSponsors","sponsor","id","sys","getAllJobs","jobCollection","allJobs","job"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Job, Sponsor, Stage, Speaker } from '@lib/types';\n\nconst API_URL = `https://graphql.contentful.com/content/v1/spaces/${process.env.CONTENTFUL_SPACE_ID}`;\nconst API_TOKEN = process.env.CONTENTFUL_ACCESS_TOKEN;\n\nasync function fetchCmsAPI(query: string) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers(): Promise<Speaker[]> {\n  const data = await fetchCmsAPI(`\n    {\n      speakerCollection {\n        items {\n          name\n          bio\n          title\n          slug\n          twitter\n          github\n          company\n          talk {\n            ... on Talk {\n              title\n              description\n            }\n          }\n          image {\n            url\n          }\n          imageSquare: image {\n            url\n          }\n        }\n      }\n    }\n  `);\n\n  return data.speakerCollection.items.map((speaker: any) => speaker);\n}\n\nexport async function getAllStages(): Promise<Stage[]> {\n  const data = await fetchCmsAPI(`\n    {\n      stageCollection {\n        items {\n            name\n            slug\n            stream\n            discord\n            scheduleCollection(limit: 0) {\n              items {\n                ... on Talk {\n                  title\n                  start\n                  end\n                  speakerCollection(limit: 5) {\n                    items {\n                      ... on Speaker {\n                      name\n                      slug\n                      image {\n                        url\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return data.stageCollection.items.reduce((allStages: any, stage: any) => {\n    const schedule = stage.scheduleCollection.items.map((talk: any) => ({\n      speaker: talk.speakerCollection.items.map((speaker: any) => speaker),\n      ...talk\n    }));\n    return [{ schedule, ...stage }, ...(allStages || [])];\n  }, []);\n}\n\nexport async function getAllSponsors(): Promise<Sponsor[]> {\n  const data = await fetchCmsAPI(`\n    {\n      companyCollection(order: tierRank_ASC, limit: 100) {\n        items {\n            sys {\n              id\n            }\n            name\n            description\n            slug\n            website\n            callToAction\n            callToActionLink\n            discord\n            youtubeSlug\n            tier\n            links \n            cardImage {\n              url\n            }\n            logo {\n              url\n            }\n        }\n      }\n    }\n  `);\n\n  return data.companyCollection.items.reduce((allSponsors: any, sponsor: any) => {\n    return [{ id: sponsor.sys.id, ...sponsor }, ...(allSponsors || [])];\n  }, []);\n}\n\nexport async function getAllJobs(): Promise<Job[]> {\n  const data = await fetchCmsAPI(`\n    {\n      jobCollection(order: rank_ASC, limit: 100) {\n        items {\n            sys {\n              id\n            }\n            companyName\n            title\n            description\n            discord\n            link\n            rank\n        }\n      }\n    }\n  `);\n\n  return data.jobCollection.items.reduce((allJobs: any, job: any) => {\n    return [{ id: job.sys.id, ...job }, ...(allJobs || [])];\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}