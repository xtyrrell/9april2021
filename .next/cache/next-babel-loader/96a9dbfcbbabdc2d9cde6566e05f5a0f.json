{"ast":null,"code":"/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst agilityContentSync = require('@agility/content-sync');\n\nconst agilityFileSystem = require('@agility/content-sync/src/store-interface-filesystem');\n\nconst agilityConfig = {\n  guid: process.env.AGILITY_GUID,\n  fetchAPIKey: process.env.AGILITY_API_FETCH_KEY,\n  previewAPIKey: process.env.AGILITY_API_PREVIEW_KEY,\n  languageCode: 'en-us',\n  channelName: 'website',\n  securityKey: process.env.AGILITY_SECURITY_KEY\n};\nexport async function getAllSpeakers() {\n  const agility = await syncContentAndGetClient(null);\n  const speakers = await agility.getContentList({\n    referenceName: 'speakers',\n    languageCode: agilityConfig.languageCode\n  });\n  const schedule = await agility.getContentList({\n    referenceName: 'schedule',\n    languageCode: agilityConfig.languageCode\n  });\n  const languageCode = agilityConfig.languageCode;\n  const lst = [];\n  await asyncForEach(speakers, async speaker => {\n    speaker = await expandContentItem({\n      agility,\n      contentItem: speaker,\n      languageCode,\n      depth: 1\n    });\n    const talks = schedule.filter(t => {\n      return `,${t.fields.speakerIDs},`.indexOf(`,${speaker.contentID},`) !== -1;\n    }).map(t => {\n      return {\n        title: t.fields.name,\n        description: t.fields.description\n      };\n    });\n    const talk = (talks || []).length > 0 ? talks[0] : null;\n    lst.push({\n      name: speaker.fields.name,\n      title: speaker.fields.title,\n      bio: speaker.fields.bio,\n      slug: speaker.fields.slug,\n      twitter: speaker.fields.twitter,\n      github: speaker.fields.github,\n      company: speaker.fields.company.fields.name,\n      image: {\n        url: `${speaker.fields.image.url}?w=300&h=400&c=1`\n      },\n      imageSquare: {\n        url: `${speaker.fields.image.url}?w=192&h=192&c=1`\n      },\n      talk\n    });\n  });\n  return lst.sort((a, b) => a.name > b.name ? 1 : -1);\n}\nexport async function getAllStages() {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n  const stages = await agility.getContentList({\n    referenceName: 'stages',\n    languageCode\n  });\n  await expandContentList({\n    agility,\n    contentItems: stages,\n    languageCode,\n    depth: 2\n  });\n  const lst = stages.sort((a, b) => a.properties.itemOrder > b.properties.itemOrder ? 1 : -1).map(stage => {\n    var _stage$fields$schedul;\n\n    const schedule = (_stage$fields$schedul = stage.fields.schedule) === null || _stage$fields$schedul === void 0 ? void 0 : _stage$fields$schedul.map(talk => {\n      var _talk$fields$speaker;\n\n      return {\n        title: talk.fields.name,\n        start: talk.fields.start,\n        end: talk.fields.end,\n        speaker: (_talk$fields$speaker = talk.fields.speaker) === null || _talk$fields$speaker === void 0 ? void 0 : _talk$fields$speaker.map(speaker => {\n          return {\n            name: speaker.fields.name,\n            slug: speaker.fields.slug,\n            image: {\n              url: `${speaker.fields.image.url}?w=120&h=120&c=1`\n            }\n          };\n        })\n      };\n    });\n    return {\n      name: stage.fields.name,\n      slug: stage.fields.slug,\n      stream: stage.fields.stream,\n      discord: stage.fields.discord,\n      schedule\n    };\n  });\n  return lst;\n}\nexport async function getAllSponsors() {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n  let companies = await agility.getContentList({\n    referenceName: 'companies',\n    languageCode: agilityConfig.languageCode\n  });\n  companies = companies.sort((a, b) => a.fields.tierRank > b.fields.tierRank ? 1 : -1);\n  const lst = [];\n  await asyncForEach(companies, async company => {\n    company = await expandLinkedList({\n      agility,\n      contentItem: company,\n      languageCode,\n      fieldName: 'links',\n      sortIDField: null,\n      excludeNonSortedIds: false\n    });\n    let links = [];\n\n    if (company.fields.links) {\n      links = company.fields.links.map(link => {\n        return {\n          url: link.fields.link.href,\n          text: link.fields.link.text\n        };\n      });\n    }\n\n    lst.push({\n      name: company.fields.name,\n      discord: company.fields.discord,\n      slug: company.fields.slug,\n      website: company.fields.website,\n      callToAction: company.fields.callToAction.text,\n      callToActionLink: company.fields.callToAction.href,\n      youtubeSlug: company.fields.youtubeSlug,\n      tier: company.fields.tier,\n      description: company.fields.description,\n      cardImage: {\n        url: `${company.fields.cardImage.url}`\n      },\n      logo: {\n        url: `${company.fields.logo.url}`\n      },\n      links\n    });\n  });\n  return lst;\n}\nexport async function getAllJobs() {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n  let jobs = await agility.getContentList({\n    referenceName: 'jobs',\n    languageCode: agilityConfig.languageCode\n  });\n  jobs = jobs.sort((a, b) => a.fields.rank > b.fields.rank ? 1 : -1);\n  await expandContentList({\n    agility,\n    contentItems: jobs,\n    languageCode,\n    depth: 1\n  });\n  return jobs.map(job => {\n    var _job$fields$company;\n\n    return {\n      id: job.contentID,\n      companyName: (_job$fields$company = job.fields.company) === null || _job$fields$company === void 0 ? void 0 : _job$fields$company.fields.name,\n      title: job.fields.name,\n      description: job.fields.description,\n      discord: job.fields.discord,\n      link: job.fields.link,\n      rank: parseInt(job.fields.rank)\n    };\n  }).sort((a, b) => a.rank > b.rank ? 1 : -1);\n}\n\nconst getSyncClient = context => {\n  let {\n    isPreview,\n    isDevelopmentMode\n  } = context || {};\n\n  if (isDevelopmentMode === undefined) {\n    isDevelopmentMode = true;\n  }\n\n  if (isPreview === undefined) {\n    isPreview = isDevelopmentMode;\n  }\n\n  const apiKey = isPreview ? agilityConfig.previewAPIKey : agilityConfig.fetchAPIKey;\n\n  if (!agilityConfig.guid) {\n    console.log('Agility CMS => No GUID was provided.');\n    return null;\n  }\n\n  let cachePath = `node_modules/@agility/content-sync/cache/${agilityConfig.guid}/${isPreview ? 'preview' : 'live'}`;\n\n  if (!isDevelopmentMode) {\n    cachePath = `/tmp/agilitycache/${agilityConfig.guid}/${isPreview ? 'preview' : 'live'}`;\n  }\n\n  const client = agilityContentSync.getSyncClient({\n    guid: agilityConfig.guid,\n    apiKey: apiKey,\n    isPreview: isPreview,\n    languages: [agilityConfig.languageCode],\n    channels: [agilityConfig.channelName],\n    store: {\n      interface: agilityFileSystem,\n      options: {\n        rootPath: cachePath\n      }\n    }\n  });\n  return client;\n};\n\nconst syncContentAndGetClient = async context => {\n  const client = getSyncClient(context);\n  await client.runSync();\n  return client.store;\n};\n\nconst expandContentList = async ({\n  agility,\n  contentItems,\n  languageCode,\n  depth\n}) => {\n  await asyncForEach(contentItems, async contentItem => {\n    await expandContentItem({\n      agility,\n      contentItem,\n      languageCode,\n      depth\n    });\n  });\n};\n\nconst expandContentItem = async ({\n  agility,\n  contentItem,\n  languageCode,\n  depth = 1\n}) => {\n  if (!contentItem) return null;\n  const api = agility;\n\n  if (depth > 0) {\n    let fields = contentItem.fields;\n    if (!fields) fields = contentItem.customFields;\n\n    for (const fieldName in fields) {\n      const fieldValue = fields[fieldName];\n\n      if (fieldValue.contentid > 0) {\n        const childItem = await api.getContentItem({\n          contentID: fieldValue.contentid,\n          languageCode,\n          depth: depth - 1\n        });\n        if (childItem != null) fields[fieldName] = childItem;\n      } else if (fieldValue.sortids && fieldValue.sortids.split) {\n        const sortIDAry = fieldValue.sortids.split(',');\n        const childItems = [];\n\n        for (const childItemID of sortIDAry) {\n          const childItem = await api.getContentItem({\n            contentID: childItemID,\n            languageCode,\n            depth: depth - 1\n          });\n          if (childItem != null) childItems.push(childItem);\n        }\n\n        fields[fieldName] = childItems;\n      }\n    }\n  }\n\n  return contentItem;\n};\n\nconst expandLinkedList = async ({\n  agility,\n  contentItem,\n  languageCode,\n  fieldName,\n  sortIDField = null,\n  excludeNonSortedIds = false\n}) => {\n  var _listItems;\n\n  if (!contentItem) return null;\n  const fieldObj = contentItem.fields[fieldName];\n\n  if (!fieldObj) {\n    contentItem.fields[fieldName] = [];\n    return contentItem;\n  }\n\n  const referenceName = fieldObj.referencename;\n  if (!referenceName) throw Error(`A referencename property was not found on the ${fieldName} value.`);\n  let listItems = await agility.getContentList({\n    referenceName,\n    languageCode\n  });\n\n  if (((_listItems = listItems) === null || _listItems === void 0 ? void 0 : _listItems.length) > 0) {\n    if (sortIDField) {\n      const sortIDs = contentItem.fields[sortIDField];\n\n      if ((sortIDs === null || sortIDs === void 0 ? void 0 : sortIDs.length) > 0 && (sortIDs === null || sortIDs === void 0 ? void 0 : sortIDs.split)) {\n        const sortIDAry = sortIDs.split(',');\n        const sortedItems = [];\n\n        for (const idStr of sortIDAry) {\n          const childContentID = parseInt(idStr);\n          const childItemIndex = listItems.findIndex(item => item.contentID === childContentID);\n\n          if (childItemIndex >= 0) {\n            sortedItems.push(listItems[childItemIndex]);\n            listItems.splice(childItemIndex, 1);\n          }\n        }\n\n        if (excludeNonSortedIds !== true) {\n          listItems = sortedItems.concat(listItems);\n        } else {\n          listItems = sortedItems;\n        }\n      }\n    }\n  }\n\n  contentItem.fields[fieldName] = listItems;\n  return contentItem;\n};\n\nconst asyncForEach = async (array, callback) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};","map":{"version":3,"sources":["/Users/shai/9april2021/lib/cms-providers/agility.ts"],"names":["agilityContentSync","require","agilityFileSystem","agilityConfig","guid","process","env","AGILITY_GUID","fetchAPIKey","AGILITY_API_FETCH_KEY","previewAPIKey","AGILITY_API_PREVIEW_KEY","languageCode","channelName","securityKey","AGILITY_SECURITY_KEY","getAllSpeakers","agility","syncContentAndGetClient","speakers","getContentList","referenceName","schedule","lst","asyncForEach","speaker","expandContentItem","contentItem","depth","talks","filter","t","fields","speakerIDs","indexOf","contentID","map","title","name","description","talk","length","push","bio","slug","twitter","github","company","image","url","imageSquare","sort","a","b","getAllStages","stages","expandContentList","contentItems","properties","itemOrder","stage","start","end","stream","discord","getAllSponsors","companies","tierRank","expandLinkedList","fieldName","sortIDField","excludeNonSortedIds","links","link","href","text","website","callToAction","callToActionLink","youtubeSlug","tier","cardImage","logo","getAllJobs","jobs","rank","job","id","companyName","parseInt","getSyncClient","context","isPreview","isDevelopmentMode","undefined","apiKey","console","log","cachePath","client","languages","channels","store","interface","options","rootPath","runSync","api","customFields","fieldValue","contentid","childItem","getContentItem","sortids","split","sortIDAry","childItems","childItemID","fieldObj","referencename","Error","listItems","sortIDs","sortedItems","idStr","childContentID","childItemIndex","findIndex","item","splice","concat","array","callback","index"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nconst agilityContentSync = require('@agility/content-sync');\nconst agilityFileSystem = require('@agility/content-sync/src/store-interface-filesystem');\n\nimport { Job, Speaker, Sponsor, Stage } from '../types';\n\nconst agilityConfig = {\n  guid: process.env.AGILITY_GUID,\n  fetchAPIKey: process.env.AGILITY_API_FETCH_KEY,\n  previewAPIKey: process.env.AGILITY_API_PREVIEW_KEY,\n  languageCode: 'en-us',\n  channelName: 'website',\n  securityKey: process.env.AGILITY_SECURITY_KEY\n};\n\nexport async function getAllSpeakers(): Promise<Speaker[]> {\n  const agility = await syncContentAndGetClient(null);\n  const speakers = await agility.getContentList({\n    referenceName: 'speakers',\n    languageCode: agilityConfig.languageCode\n  });\n  const schedule = await agility.getContentList({\n    referenceName: 'schedule',\n    languageCode: agilityConfig.languageCode\n  });\n  const languageCode = agilityConfig.languageCode;\n\n  const lst: Speaker[] = [];\n\n  await asyncForEach(speakers, async (speaker: any) => {\n    speaker = await expandContentItem({ agility, contentItem: speaker, languageCode, depth: 1 });\n\n    const talks = schedule\n      .filter((t: any) => {\n        return `,${t.fields.speakerIDs},`.indexOf(`,${speaker.contentID},`) !== -1;\n      })\n      .map((t: any) => {\n        return {\n          title: t.fields.name,\n          description: t.fields.description\n        };\n      });\n\n    const talk = (talks || []).length > 0 ? talks[0] : null;\n\n    lst.push({\n      name: speaker.fields.name,\n      title: speaker.fields.title,\n      bio: speaker.fields.bio,\n      slug: speaker.fields.slug,\n      twitter: speaker.fields.twitter,\n      github: speaker.fields.github,\n      company: speaker.fields.company.fields.name,\n      image: {\n        url: `${speaker.fields.image.url}?w=300&h=400&c=1`\n      },\n      imageSquare: {\n        url: `${speaker.fields.image.url}?w=192&h=192&c=1`\n      },\n      talk\n    });\n  });\n\n  return lst.sort((a, b) => (a.name > b.name ? 1 : -1));\n}\n\nexport async function getAllStages(): Promise<Stage[]> {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n  const stages = await agility.getContentList({ referenceName: 'stages', languageCode });\n  await expandContentList({ agility, contentItems: stages, languageCode, depth: 2 });\n\n  const lst: Stage[] = stages\n    .sort((a: any, b: any) => (a.properties.itemOrder > b.properties.itemOrder ? 1 : -1))\n    .map((stage: any) => {\n      const schedule: any[] = stage.fields.schedule?.map((talk: any) => {\n        return {\n          title: talk.fields.name,\n          start: talk.fields.start,\n          end: talk.fields.end,\n          speaker: talk.fields.speaker?.map((speaker: any) => {\n            return {\n              name: speaker.fields.name,\n              slug: speaker.fields.slug,\n              image: {\n                url: `${speaker.fields.image.url}?w=120&h=120&c=1`\n              }\n            };\n          })\n        };\n      });\n\n      return {\n        name: stage.fields.name,\n        slug: stage.fields.slug,\n        stream: stage.fields.stream,\n        discord: stage.fields.discord,\n        schedule\n      };\n    });\n\n  return lst;\n}\n\nexport async function getAllSponsors(): Promise<Sponsor[]> {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n\n  let companies = await agility.getContentList({\n    referenceName: 'companies',\n    languageCode: agilityConfig.languageCode\n  });\n  companies = companies.sort((a: any, b: any) => (a.fields.tierRank > b.fields.tierRank ? 1 : -1));\n\n  const lst: Sponsor[] = [];\n  await asyncForEach(companies, async (company: any) => {\n    company = await expandLinkedList({\n      agility,\n      contentItem: company,\n      languageCode,\n      fieldName: 'links',\n      sortIDField: null,\n      excludeNonSortedIds: false\n    });\n\n    let links = [];\n\n    if (company.fields.links) {\n      links = company.fields.links.map((link: any) => {\n        return {\n          url: link.fields.link.href,\n          text: link.fields.link.text\n        };\n      });\n    }\n\n    lst.push({\n      name: company.fields.name,\n      discord: company.fields.discord,\n      slug: company.fields.slug,\n      website: company.fields.website,\n      callToAction: company.fields.callToAction.text,\n      callToActionLink: company.fields.callToAction.href,\n      youtubeSlug: company.fields.youtubeSlug,\n      tier: company.fields.tier,\n      description: company.fields.description,\n      cardImage: {\n        url: `${company.fields.cardImage.url}`\n      },\n      logo: {\n        url: `${company.fields.logo.url}`\n      },\n      links\n    });\n  });\n\n  return lst;\n}\n\nexport async function getAllJobs(): Promise<Job[]> {\n  const agility = await syncContentAndGetClient(null);\n  const languageCode = agilityConfig.languageCode;\n  let jobs = await agility.getContentList({\n    referenceName: 'jobs',\n    languageCode: agilityConfig.languageCode\n  });\n\n  jobs = jobs.sort((a: any, b: any) => (a.fields.rank > b.fields.rank ? 1 : -1));\n\n  await expandContentList({ agility, contentItems: jobs, languageCode, depth: 1 });\n\n  return jobs\n    .map((job: any) => {\n      return {\n        id: job.contentID,\n        companyName: job.fields.company?.fields.name,\n        title: job.fields.name,\n        description: job.fields.description,\n        discord: job.fields.discord,\n        link: job.fields.link,\n        rank: parseInt(job.fields.rank)\n      };\n    })\n    .sort((a: any, b: any) => (a.rank > b.rank ? 1 : -1));\n}\n\nconst getSyncClient = (context: any) => {\n  let { isPreview, isDevelopmentMode } = context || {};\n\n  if (isDevelopmentMode === undefined) {\n    isDevelopmentMode = process.env.NODE_ENV === 'development';\n  }\n\n  if (isPreview === undefined) {\n    isPreview = isDevelopmentMode;\n  }\n\n  const apiKey = isPreview ? agilityConfig.previewAPIKey : agilityConfig.fetchAPIKey;\n\n  if (!agilityConfig.guid) {\n    console.log('Agility CMS => No GUID was provided.');\n    return null;\n  }\n\n  let cachePath = `node_modules/@agility/content-sync/cache/${agilityConfig.guid}/${\n    isPreview ? 'preview' : 'live'\n  }`;\n\n  if (!isDevelopmentMode) {\n    cachePath = `/tmp/agilitycache/${agilityConfig.guid}/${isPreview ? 'preview' : 'live'}`;\n  }\n\n  const client = agilityContentSync.getSyncClient({\n    guid: agilityConfig.guid,\n    apiKey: apiKey,\n    isPreview: isPreview,\n    languages: [agilityConfig.languageCode],\n    channels: [agilityConfig.channelName],\n    store: {\n      interface: agilityFileSystem,\n      options: {\n        rootPath: cachePath\n      }\n    }\n  });\n\n  return client;\n};\n\nconst syncContentAndGetClient = async (context: any) => {\n  const client = getSyncClient(context);\n\n  await client.runSync();\n\n  return client.store;\n};\n\nconst expandContentList = async ({\n  agility,\n  contentItems,\n  languageCode,\n  depth\n}: {\n  agility: any;\n  contentItems: any;\n  languageCode: string;\n  depth: number;\n}) => {\n  await asyncForEach(contentItems, async (contentItem: any) => {\n    await expandContentItem({ agility, contentItem, languageCode, depth });\n  });\n};\n\nconst expandContentItem = async ({\n  agility,\n  contentItem,\n  languageCode,\n  depth = 1\n}: {\n  agility: any;\n  contentItem: any;\n  languageCode: string;\n  depth: number;\n}) => {\n  if (!contentItem) return null;\n\n  const api = agility;\n\n  if (depth > 0) {\n    let fields = contentItem.fields;\n    if (!fields) fields = contentItem.customFields;\n\n    for (const fieldName in fields) {\n      const fieldValue = fields[fieldName];\n\n      if (fieldValue.contentid > 0) {\n        const childItem = await api.getContentItem({\n          contentID: fieldValue.contentid,\n          languageCode,\n          depth: depth - 1\n        });\n        if (childItem != null) fields[fieldName] = childItem;\n      } else if (fieldValue.sortids && fieldValue.sortids.split) {\n        const sortIDAry = fieldValue.sortids.split(',');\n        const childItems = [];\n\n        for (const childItemID of sortIDAry) {\n          const childItem = await api.getContentItem({\n            contentID: childItemID,\n            languageCode,\n            depth: depth - 1\n          });\n          if (childItem != null) childItems.push(childItem);\n        }\n        fields[fieldName] = childItems;\n      }\n    }\n  }\n  return contentItem;\n};\n\nconst expandLinkedList = async ({\n  agility,\n  contentItem,\n  languageCode,\n  fieldName,\n  sortIDField = null,\n  excludeNonSortedIds = false\n}: {\n  agility: any;\n  contentItem: any;\n  languageCode: string;\n  fieldName: string;\n  sortIDField: string | null;\n  excludeNonSortedIds: boolean;\n}) => {\n  if (!contentItem) return null;\n\n  const fieldObj = contentItem.fields[fieldName];\n  if (!fieldObj) {\n    contentItem.fields[fieldName] = [];\n    return contentItem;\n  }\n\n  const referenceName = fieldObj.referencename;\n  if (!referenceName)\n    throw Error(`A referencename property was not found on the ${fieldName} value.`);\n\n  let listItems = await agility.getContentList({ referenceName, languageCode });\n  if (listItems?.length > 0) {\n    if (sortIDField) {\n      const sortIDs = contentItem.fields[sortIDField];\n\n      if (sortIDs?.length > 0 && sortIDs?.split) {\n        const sortIDAry = sortIDs.split(',');\n        const sortedItems = [];\n\n        for (const idStr of sortIDAry) {\n          const childContentID = parseInt(idStr);\n\n          const childItemIndex = listItems.findIndex(\n            (item: { contentID: number }) => item.contentID === childContentID\n          );\n\n          if (childItemIndex >= 0) {\n            sortedItems.push(listItems[childItemIndex]);\n            listItems.splice(childItemIndex, 1);\n          }\n        }\n\n        if (excludeNonSortedIds !== true) {\n          listItems = sortedItems.concat(listItems);\n        } else {\n          listItems = sortedItems;\n        }\n      }\n    }\n  }\n\n  contentItem.fields[fieldName] = listItems;\n  return contentItem;\n};\n\nconst asyncForEach = async (array: any, callback: any) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}