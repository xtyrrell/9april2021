{"ast":null,"code":"/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst API_URL = 'https://graphql.datocms.com/';\nconst API_TOKEN = process.env.DATOCMS_READ_ONLY_API_TOKEN;\n\nasync function fetchCmsAPI(query, {\n  variables\n} = {}) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers() {\n  const data = await fetchCmsAPI(`\n    {\n      allSpeakers(first: 100) {\n        name\n        bio\n        title\n        slug\n        twitter\n        github\n        company\n        talk {\n          title\n          description\n        }\n        image {\n          url(imgixParams: {fm: jpg, fit: crop, w: 300, h: 400})\n        }\n        imageSquare: image {\n          url(imgixParams: {fm: jpg, fit: crop, w: 192, h: 192})\n        }\n      }\n    }\n  `);\n  return data.allSpeakers;\n}\nexport async function getAllStages() {\n  const data = await fetchCmsAPI(`\n    {\n      allStages(first: 100, orderBy: order_ASC) {\n        name\n        slug\n        stream\n        discord\n        schedule {\n          title\n          start\n          end\n          speaker {\n            name\n            slug\n            image {\n              url(imgixParams: {fm: jpg, fit: crop, w: 120, h: 120})\n            }\n          }\n        }\n      }\n    }\n  `);\n  return data.allStages;\n}\nexport async function getAllSponsors() {\n  const data = await fetchCmsAPI(`\n    {\n      allCompanies(first: 100, orderBy: tierRank_ASC) {\n        name\n        description\n        slug\n        website\n        callToAction\n        callToActionLink\n        discord\n        youtubeSlug\n        tier\n        links {\n          url\n          text\n        }\n        cardImage {\n          url(imgixParams: {fm: jpg, fit: crop})\n        }\n        logo {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100})\n        }\n      }\n    }\n  `);\n  return data.allCompanies;\n}\nexport async function getAllJobs() {\n  const data = await fetchCmsAPI(`\n    {\n      allJobs(first: 100, orderBy: rank_ASC) {\n        id\n        companyName\n        title\n        description\n        discord\n        link\n        rank\n      }\n    }\n  `);\n  return data.allJobs;\n}","map":{"version":3,"sources":["/Users/shai/9april2021/lib/cms-providers/dato.ts"],"names":["API_URL","API_TOKEN","process","env","DATOCMS_READ_ONLY_API_TOKEN","fetchCmsAPI","query","variables","res","fetch","method","headers","Authorization","body","JSON","stringify","json","errors","console","error","Error","data","getAllSpeakers","allSpeakers","getAllStages","allStages","getAllSponsors","allCompanies","getAllJobs","allJobs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAMA,OAAO,GAAG,8BAAhB;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,2BAA9B;;AAEA,eAAeC,WAAf,CAA2BC,KAA3B,EAA0C;AAAEC,EAAAA;AAAF,IAAqD,EAA/F,EAAmG;AACjG,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACT,OAAD,EAAU;AAC/BU,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,aAAa,EAAG,UAASX,SAAU;AAF5B,KAFsB;AAM/BY,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AANyB,GAAV,CAAvB;AAYA,QAAMS,IAAI,GAAG,MAAMR,GAAG,CAACQ,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACf;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,CAACK,IAAZ;AACD;;AAED,OAAO,eAAeC,cAAf,GAAoD;AACzD,QAAMD,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAtBgC,CAA9B;AAwBA,SAAOgB,IAAI,CAACE,WAAZ;AACD;AAED,OAAO,eAAeC,YAAf,GAAgD;AACrD,QAAMH,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArBgC,CAA9B;AAuBA,SAAOgB,IAAI,CAACI,SAAZ;AACD;AAED,OAAO,eAAeC,cAAf,GAAoD;AACzD,QAAML,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAxBgC,CAA9B;AA0BA,SAAOgB,IAAI,CAACM,YAAZ;AACD;AAED,OAAO,eAAeC,UAAf,GAA4C;AACjD,QAAMP,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZgC,CAA9B;AAcA,SAAOgB,IAAI,CAACQ,OAAZ;AACD","sourcesContent":["/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Job, Sponsor, Stage, Speaker } from '@lib/types';\n\nconst API_URL = 'https://graphql.datocms.com/';\nconst API_TOKEN = process.env.DATOCMS_READ_ONLY_API_TOKEN;\n\nasync function fetchCmsAPI(query: string, { variables }: { variables?: Record<string, any> } = {}) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers(): Promise<Speaker[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allSpeakers(first: 100) {\n        name\n        bio\n        title\n        slug\n        twitter\n        github\n        company\n        talk {\n          title\n          description\n        }\n        image {\n          url(imgixParams: {fm: jpg, fit: crop, w: 300, h: 400})\n        }\n        imageSquare: image {\n          url(imgixParams: {fm: jpg, fit: crop, w: 192, h: 192})\n        }\n      }\n    }\n  `);\n\n  return data.allSpeakers;\n}\n\nexport async function getAllStages(): Promise<Stage[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allStages(first: 100, orderBy: order_ASC) {\n        name\n        slug\n        stream\n        discord\n        schedule {\n          title\n          start\n          end\n          speaker {\n            name\n            slug\n            image {\n              url(imgixParams: {fm: jpg, fit: crop, w: 120, h: 120})\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return data.allStages;\n}\n\nexport async function getAllSponsors(): Promise<Sponsor[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allCompanies(first: 100, orderBy: tierRank_ASC) {\n        name\n        description\n        slug\n        website\n        callToAction\n        callToActionLink\n        discord\n        youtubeSlug\n        tier\n        links {\n          url\n          text\n        }\n        cardImage {\n          url(imgixParams: {fm: jpg, fit: crop})\n        }\n        logo {\n          url(imgixParams: {fm: jpg, fit: crop, w: 100, h: 100})\n        }\n      }\n    }\n  `);\n\n  return data.allCompanies;\n}\n\nexport async function getAllJobs(): Promise<Job[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allJobs(first: 100, orderBy: rank_ASC) {\n        id\n        companyName\n        title\n        description\n        discord\n        link\n        rank\n      }\n    }\n  `);\n\n  return data.allJobs;\n}\n"]},"metadata":{},"sourceType":"module"}