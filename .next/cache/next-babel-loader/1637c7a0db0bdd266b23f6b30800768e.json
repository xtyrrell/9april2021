{"ast":null,"code":"/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { richTextAsText, getLinkUrl } from './utils';\nconst API_REF_URL = `https://${process.env.PRISMIC_REPO_ID}.prismic.io/api/v2`;\nconst API_URL = `https://${process.env.PRISMIC_REPO_ID}.prismic.io/graphql`;\nconst API_TOKEN = process.env.PRISMIC_ACCESS_TOKEN || '';\n\nasync function fetchCmsMasterRef() {\n  var _json$refs;\n\n  const res = await fetch(`${API_REF_URL}${API_TOKEN ? `?access_token=${API_TOKEN}` : ''}`);\n  const json = await res.json();\n\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  const masterVersion = ((_json$refs = json.refs) === null || _json$refs === void 0 ? void 0 : _json$refs.find(apiVersion => apiVersion.id === 'master')) || null;\n  const masterRef = (masterVersion === null || masterVersion === void 0 ? void 0 : masterVersion.ref) || null;\n  return masterRef;\n}\n\nasync function fetchCmsAPI(query, {\n  variables\n} = {}) {\n  const masterRef = await fetchCmsMasterRef();\n  const res = await fetch(`${API_URL}?query=${encodeURIComponent(query)}`, {\n    headers: {\n      'Prismic-Ref': `${masterRef}`,\n      Authorization: `Token ${API_TOKEN}`\n    }\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers() {\n  const data = await fetchCmsAPI(`\n    {\n      allSpeakers(first: 100) {\n        edges {\n          node {\n            name\n            bio\n            title\n            twitter {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            github {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            company\n            image\n            talk {\n              _linkType\n              ...on  Talk{\n                title\n                description\n              }\n            }\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `);\n  const reformatedData = data.allSpeakers.edges.map(edge => {\n    var _edge$node$image, _edge$node$talk, _edge$node$talk2;\n\n    return {\n      name: richTextAsText(edge.node.name),\n      bio: richTextAsText(edge.node.bio),\n      slug: edge.node._meta.uid,\n      title: richTextAsText(edge.node.title),\n      twitter: getLinkUrl(edge.node.twitter),\n      github: getLinkUrl(edge.node.github),\n      company: richTextAsText(edge.node.company),\n      image: {\n        url: ((_edge$node$image = edge.node.image) === null || _edge$node$image === void 0 ? void 0 : _edge$node$image.url.replace('compress,format', 'format')) || 'https://images.prismic.io'\n      },\n      talk: {\n        title: ((_edge$node$talk = edge.node.talk) === null || _edge$node$talk === void 0 ? void 0 : _edge$node$talk.title) ? richTextAsText(edge.node.talk.title) : '',\n        description: ((_edge$node$talk2 = edge.node.talk) === null || _edge$node$talk2 === void 0 ? void 0 : _edge$node$talk2.description) ? richTextAsText(edge.node.talk.description) : ''\n      }\n    };\n  });\n  return reformatedData;\n}\nexport async function getAllStages() {\n  const data = await fetchCmsAPI(`\n    {\n      allStages(first: 100, sortBy: name_ASC) {\n        edges {\n          node {\n            name\n            _meta {\n              uid\n            }\n            stream {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            schedule {\n              talk {\n                _linkType\n                ...on Talk {\n                  title\n                  start\n                  end\n                  speakers {\n                    speaker {\n                      ...on Speaker {\n                        name\n                        _meta {\n                          uid\n                        }\n                        image\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const reformatedData = data.allStages.edges.map(edge => {\n    return {\n      name: richTextAsText(edge.node.name),\n      slug: edge.node._meta.uid,\n      stream: getLinkUrl(edge.node.stream),\n      discord: getLinkUrl(edge.node.discord),\n      schedule: edge.node.schedule.filter(item => item.talk).map(item => {\n        if (item.talk) return {\n          title: richTextAsText(item.talk.title),\n          start: item.talk.start,\n          end: item.talk.end,\n          speaker: item.talk.speakers.map(item => {\n            var _item$speaker$image;\n\n            return {\n              name: richTextAsText(item.speaker.name),\n              slug: item.speaker._meta.uid,\n              image: {\n                url: ((_item$speaker$image = item.speaker.image) === null || _item$speaker$image === void 0 ? void 0 : _item$speaker$image.url.replace('compress,format', 'format')) || 'https://images.prismic.io'\n              }\n            };\n          })\n        };\n      })\n    };\n  });\n  return reformatedData;\n}\nexport async function getAllSponsors() {\n  const data = await fetchCmsAPI(`\n    {\n      allCompanys(first: 100, sortBy: tier_rank_ASC) {\n        edges {\n          node {\n            name\n            description\n            _meta {\n              uid\n            }\n            website {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            call_to_action\n            call_to_action_link {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            youtube_slug\n            tier\n            links {\n              link {\n                _linkType\n                ...on _ExternalLink {\n                  url\n                }\n              }\n              link_text\n            }\n            card_image\n            logo\n          }\n        }\n      }\n    }\n  `);\n  const reformatedData = data.allCompanys.edges.map(edge => {\n    var _edge$node$card_image, _edge$node$logo;\n\n    return {\n      name: richTextAsText(edge.node.name),\n      description: richTextAsText(edge.node.description),\n      slug: edge.node._meta.uid,\n      website: getLinkUrl(edge.node.website),\n      callToAction: richTextAsText(edge.node.call_to_action),\n      callToActionLink: getLinkUrl(edge.node.call_to_action_link),\n      discord: getLinkUrl(edge.node.discord),\n      youtubeSlug: edge.node.youtube_slug,\n      tier: edge.node.tier,\n      links: edge.node.links.map(item => ({\n        url: getLinkUrl(item.link),\n        text: item.link_text\n      })),\n      cardImage: {\n        url: ((_edge$node$card_image = edge.node.card_image) === null || _edge$node$card_image === void 0 ? void 0 : _edge$node$card_image.url.replace('compress,format', 'format')) || 'https://images.prismic.io'\n      },\n      logo: {\n        url: ((_edge$node$logo = edge.node.logo) === null || _edge$node$logo === void 0 ? void 0 : _edge$node$logo.url.replace('compress,format', 'format')) || 'https://images.prismic.io'\n      }\n    };\n  });\n  return reformatedData;\n}\nexport async function getAllJobs() {\n  const data = await fetchCmsAPI(`\n    {\n      allJobs(first: 100, sortBy: rank_ASC) {\n        edges {\n          node {\n            _meta {\n              id\n            }\n            company_name\n            title\n            description\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            link {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            rank\n          }\n        }\n      }\n    }\n  `);\n  const reformatedData = data.allJobs.edges.map(edge => {\n    return {\n      id: edge.node._meta.id,\n      companyName: richTextAsText(edge.node.company_name),\n      title: richTextAsText(edge.node.title),\n      description: richTextAsText(edge.node.description),\n      discord: getLinkUrl(edge.node.discord),\n      link: getLinkUrl(edge.node.link),\n      rank: edge.node.rank\n    };\n  });\n  return reformatedData;\n}","map":{"version":3,"sources":["/Users/shai/9april2021/lib/cms-providers/prismic/index.ts"],"names":["richTextAsText","getLinkUrl","API_REF_URL","process","env","PRISMIC_REPO_ID","API_URL","API_TOKEN","PRISMIC_ACCESS_TOKEN","fetchCmsMasterRef","res","fetch","json","errors","console","error","Error","masterVersion","refs","find","apiVersion","id","masterRef","ref","fetchCmsAPI","query","variables","encodeURIComponent","headers","Authorization","data","getAllSpeakers","reformatedData","allSpeakers","edges","map","edge","name","node","bio","slug","_meta","uid","title","twitter","github","company","image","url","replace","talk","description","getAllStages","allStages","stream","discord","schedule","filter","item","start","end","speaker","speakers","getAllSponsors","allCompanys","website","callToAction","call_to_action","callToActionLink","call_to_action_link","youtubeSlug","youtube_slug","tier","links","link","text","link_text","cardImage","card_image","logo","getAllJobs","allJobs","companyName","company_name","rank"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Job, Sponsor, Stage, Speaker } from '@lib/types';\nimport { richTextAsText, getLinkUrl } from './utils';\n\nconst API_REF_URL = `https://${process.env.PRISMIC_REPO_ID}.prismic.io/api/v2`;\nconst API_URL = `https://${process.env.PRISMIC_REPO_ID}.prismic.io/graphql`;\nconst API_TOKEN = process.env.PRISMIC_ACCESS_TOKEN || '';\n\nasync function fetchCmsMasterRef() {\n  const res = await fetch(`${API_REF_URL}${API_TOKEN ? `?access_token=${API_TOKEN}` : ''}`);\n\n  const json = await res.json();\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  const masterVersion = json.refs?.find((apiVersion: any) => apiVersion.id === 'master') || null;\n  const masterRef = masterVersion?.ref || null;\n\n  return masterRef;\n}\n\nasync function fetchCmsAPI(query: string, { variables }: { variables?: Record<string, any> } = {}) {\n  const masterRef = await fetchCmsMasterRef();\n\n  const res = await fetch(`${API_URL}?query=${encodeURIComponent(query)}`, {\n    headers: {\n      'Prismic-Ref': `${masterRef}`,\n      Authorization: `Token ${API_TOKEN}`\n    }\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers(): Promise<Speaker[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allSpeakers(first: 100) {\n        edges {\n          node {\n            name\n            bio\n            title\n            twitter {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            github {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            company\n            image\n            talk {\n              _linkType\n              ...on  Talk{\n                title\n                description\n              }\n            }\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const reformatedData = data.allSpeakers.edges.map((edge: any) => {\n    return {\n      name: richTextAsText(edge.node.name),\n      bio: richTextAsText(edge.node.bio),\n      slug: edge.node._meta.uid,\n      title: richTextAsText(edge.node.title),\n      twitter: getLinkUrl(edge.node.twitter),\n      github: getLinkUrl(edge.node.github),\n      company: richTextAsText(edge.node.company),\n      image: {\n        url:\n          edge.node.image?.url.replace('compress,format', 'format') || 'https://images.prismic.io'\n      },\n      talk: {\n        title: edge.node.talk?.title ? richTextAsText(edge.node.talk.title) : '',\n        description: edge.node.talk?.description ? richTextAsText(edge.node.talk.description) : ''\n      }\n    };\n  });\n\n  return reformatedData;\n}\n\nexport async function getAllStages(): Promise<Stage[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allStages(first: 100, sortBy: name_ASC) {\n        edges {\n          node {\n            name\n            _meta {\n              uid\n            }\n            stream {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            schedule {\n              talk {\n                _linkType\n                ...on Talk {\n                  title\n                  start\n                  end\n                  speakers {\n                    speaker {\n                      ...on Speaker {\n                        name\n                        _meta {\n                          uid\n                        }\n                        image\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const reformatedData = data.allStages.edges.map((edge: any) => {\n    return {\n      name: richTextAsText(edge.node.name),\n      slug: edge.node._meta.uid,\n      stream: getLinkUrl(edge.node.stream),\n      discord: getLinkUrl(edge.node.discord),\n      schedule: edge.node.schedule\n        .filter((item: any) => item.talk)\n        .map((item: any) => {\n          if (item.talk)\n            return {\n              title: richTextAsText(item.talk.title),\n              start: item.talk.start,\n              end: item.talk.end,\n              speaker: item.talk.speakers.map((item: any) => ({\n                name: richTextAsText(item.speaker.name),\n                slug: item.speaker._meta.uid,\n                image: {\n                  url:\n                    item.speaker.image?.url.replace('compress,format', 'format') ||\n                    'https://images.prismic.io'\n                }\n              }))\n            };\n        })\n    };\n  });\n\n  return reformatedData;\n}\n\nexport async function getAllSponsors(): Promise<Sponsor[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allCompanys(first: 100, sortBy: tier_rank_ASC) {\n        edges {\n          node {\n            name\n            description\n            _meta {\n              uid\n            }\n            website {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            call_to_action\n            call_to_action_link {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            youtube_slug\n            tier\n            links {\n              link {\n                _linkType\n                ...on _ExternalLink {\n                  url\n                }\n              }\n              link_text\n            }\n            card_image\n            logo\n          }\n        }\n      }\n    }\n  `);\n\n  const reformatedData = data.allCompanys.edges.map((edge: any) => {\n    return {\n      name: richTextAsText(edge.node.name),\n      description: richTextAsText(edge.node.description),\n      slug: edge.node._meta.uid,\n      website: getLinkUrl(edge.node.website),\n      callToAction: richTextAsText(edge.node.call_to_action),\n      callToActionLink: getLinkUrl(edge.node.call_to_action_link),\n      discord: getLinkUrl(edge.node.discord),\n      youtubeSlug: edge.node.youtube_slug,\n      tier: edge.node.tier,\n      links: edge.node.links.map((item: any) => ({\n        url: getLinkUrl(item.link),\n        text: item.link_text\n      })),\n      cardImage: {\n        url:\n          edge.node.card_image?.url.replace('compress,format', 'format') ||\n          'https://images.prismic.io'\n      },\n      logo: {\n        url: edge.node.logo?.url.replace('compress,format', 'format') || 'https://images.prismic.io'\n      }\n    };\n  });\n\n  return reformatedData;\n}\n\nexport async function getAllJobs(): Promise<Job[]> {\n  const data = await fetchCmsAPI(`\n    {\n      allJobs(first: 100, sortBy: rank_ASC) {\n        edges {\n          node {\n            _meta {\n              id\n            }\n            company_name\n            title\n            description\n            discord {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            link {\n              _linkType\n              ...on _ExternalLink {\n                url\n              }\n            }\n            rank\n          }\n        }\n      }\n    }\n  `);\n\n  const reformatedData = data.allJobs.edges.map((edge: any) => {\n    return {\n      id: edge.node._meta.id,\n      companyName: richTextAsText(edge.node.company_name),\n      title: richTextAsText(edge.node.title),\n      description: richTextAsText(edge.node.description),\n      discord: getLinkUrl(edge.node.discord),\n      link: getLinkUrl(edge.node.link),\n      rank: edge.node.rank\n    };\n  });\n\n  return reformatedData;\n}\n"]},"metadata":{},"sourceType":"module"}