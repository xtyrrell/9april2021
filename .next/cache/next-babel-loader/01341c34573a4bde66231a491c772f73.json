{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n\n/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst API_URL = 'https://gapi.storyblok.com/v1/api';\nconst API_TOKEN = process.env.STORYBLOK_PREVIEW_TOKEN;\n/**\n* This transformResponse() function can be removed if you're using the \n* Storyblok data directly. This transformation only happens to adapt the data\n* returned from the GraphQL api to the data structure used in the \n* starter so as not to have to modify the component files. \n*/\n\nfunction transformResponse(response, _speakers) {\n  const content = response.map(r => r.content ? r.content : r);\n  content.map(item => {\n    Object.keys(item).map(key => {\n      // assign the urls directly if not an image\n      const noAssign = ['image', 'logo', 'cardImage'];\n\n      if (item[key].url && noAssign.indexOf(key) === -1) {\n        item[key] = item[key].url;\n      } // remove nesting from schedule and assign speakers\n\n\n      if (key === 'schedule') {\n        item[key] = item[key].map(slot => {\n          slot = slot.content;\n          const speakers = _speakers === null || _speakers === void 0 ? void 0 : _speakers.filter(speaker => slot.speaker.indexOf(speaker.uuid) !== -1);\n          slot.speaker = speakers;\n          return slot;\n        });\n      }\n    });\n  });\n  return content;\n}\n\nasync function fetchCmsAPI(query, {\n  variables\n} = {}) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Token: `${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers() {\n  const data = await fetchCmsAPI(`\n  {\n    SpeakerItems(per_page: 100) {\n      items {\n        uuid\n        content {\n          name\n          bio\n          title\n          slug\n          twitter {\n            url\n          }\n          github {\n            url\n          }\n          company\n          image {\n            url: filename\n          }\n          talk {\n            content\n          }\n        }\n      }\n    }\n  }  \n  `);\n  const responseData = data.SpeakerItems.items.map(s => {\n    const speaker = s.content;\n    speaker.talk = speaker.talk.content;\n    speaker.uuid = s.uuid;\n    return speaker;\n  });\n  const transformedData = transformResponse(responseData);\n  return transformedData;\n}\nexport async function getAllStages() {\n  const speakers = await getAllSpeakers();\n  const data = await fetchCmsAPI(`\n    {\n      StageItems(per_page: 100) {\n        items {\n          content {\n            name\n            slug\n            stream {\n              url\n            }\n            discord {\n              url\n            }\n            schedule {\n              content\n            }\n          }\n        }\n      }\n    }\n  `);\n  const transformedData = transformResponse(data.StageItems.items, speakers);\n  return transformedData;\n}\nexport async function getAllSponsors() {\n  const data = await fetchCmsAPI(`\n  {\n    CompanyItems(per_page: 100) {\n      items {\n        content {\n          name\n          description\n          slug\n          website {\n            url\n          }\n          callToAction\n          callToActionLink {\n            url\n          }\n          discord {\n            url\n          }\n          youtubeSlug\n          tier\n          links\n          cardImage {\n            url: filename\n          }\n          logo {\n            url: filename\n          }\n        }\n      }\n    }\n  }  \n  `);\n  const transformedData = transformResponse(data.CompanyItems.items);\n  return transformedData;\n}\nexport async function getAllJobs() {\n  const data = await fetchCmsAPI(`\n    {\n      JobItems(per_page: 100) {\n        items {\n          content {\n            companyName\n            title\n            description\n            discord {\n              url\n            }\n            link {\n              url\n            }\n            rank\n          }\n        }\n      }\n    }\n  `);\n  const transformedData = transformResponse(data.JobItems.items);\n  return transformedData;\n}","map":{"version":3,"sources":["/Users/shai/9april2021/lib/cms-providers/storyblok.ts"],"names":["API_URL","API_TOKEN","process","env","STORYBLOK_PREVIEW_TOKEN","transformResponse","response","_speakers","content","map","r","item","Object","keys","key","noAssign","url","indexOf","slot","speakers","filter","speaker","uuid","fetchCmsAPI","query","variables","res","fetch","method","headers","Token","body","JSON","stringify","json","errors","console","error","Error","data","getAllSpeakers","responseData","SpeakerItems","items","s","talk","transformedData","getAllStages","StageItems","getAllSponsors","CompanyItems","getAllJobs","JobItems"],"mappings":"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AClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GApBgC,CAA9B;AAsBA,QAAMuB,eAAe,GAAGzC,iBAAiB,CAACkC,IAAI,CAACS,UAAL,CAAgBL,KAAjB,EAAwBxB,QAAxB,CAAzC;AACA,SAAO2B,eAAP;AACD;AAED,OAAO,eAAeG,cAAf,GAAoD;AACzD,QAAMV,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA/BgC,CAA9B;AAiCA,QAAMuB,eAAe,GAAGzC,iBAAiB,CAACkC,IAAI,CAACW,YAAL,CAAkBP,KAAnB,CAAzC;AACA,SAAOG,eAAP;AACD;AAED,OAAO,eAAeK,UAAf,GAA4C;AACjD,QAAMZ,IAAI,GAAG,MAAMhB,WAAW,CAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAnBgC,CAA9B;AAqBA,QAAMuB,eAAe,GAAGzC,iBAAiB,CAACkC,IAAI,CAACa,QAAL,CAAcT,KAAf,CAAzC;AACA,SAAOG,eAAP;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/**\n * Copyright 2020 Vercel Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Job, Sponsor, Stage, Speaker } from '@lib/types';\n\nconst API_URL = 'https://gapi.storyblok.com/v1/api';\nconst API_TOKEN = process.env.STORYBLOK_PREVIEW_TOKEN;\n\n/**\n* This transformResponse() function can be removed if you're using the \n* Storyblok data directly. This transformation only happens to adapt the data\n* returned from the GraphQL api to the data structure used in the \n* starter so as not to have to modify the component files. \n*/\nfunction transformResponse(response: any[], _speakers?: any) {\n  const content = response.map((r: any) => r.content ? r.content : r)\n  content.map((item: any) => {\n    Object.keys(item).map(key => {\n      // assign the urls directly if not an image\n      const noAssign = ['image', 'logo', 'cardImage']\n      if(item[key].url && noAssign.indexOf(key) === -1) {\n        item[key] = item[key].url\n      }\n\n      // remove nesting from schedule and assign speakers\n      if(key === 'schedule') {\n        item[key] = item[key].map((slot: { content: any; speaker: any }) => {\n          slot = slot.content\n          const speakers = _speakers?.filter((speaker: any) => slot.speaker.indexOf(speaker.uuid) !== -1)\n          slot.speaker = speakers\n          return slot\n        })\n      }\n    })\n  })\n\n  return content\n}\n\nasync function fetchCmsAPI(query: string, { variables }: { variables?: Record<string, any> } = {}) {\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Token: `${API_TOKEN}`\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    // eslint-disable-next-line no-console\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getAllSpeakers(): Promise<Speaker[]> {\n  const data = await fetchCmsAPI(`\n  {\n    SpeakerItems(per_page: 100) {\n      items {\n        uuid\n        content {\n          name\n          bio\n          title\n          slug\n          twitter {\n            url\n          }\n          github {\n            url\n          }\n          company\n          image {\n            url: filename\n          }\n          talk {\n            content\n          }\n        }\n      }\n    }\n  }  \n  `);\n\n  const responseData = data.SpeakerItems.items.map((s: any) => {\n    const speaker = s.content\n    speaker.talk = speaker.talk.content\n    speaker.uuid = s.uuid\n    return speaker\n  })\n  const transformedData = transformResponse(responseData)\n  return transformedData;\n}\n\nexport async function getAllStages(): Promise<Stage[]> {\n  const speakers = await getAllSpeakers();\n  const data = await fetchCmsAPI(`\n    {\n      StageItems(per_page: 100) {\n        items {\n          content {\n            name\n            slug\n            stream {\n              url\n            }\n            discord {\n              url\n            }\n            schedule {\n              content\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const transformedData = transformResponse(data.StageItems.items, speakers)\n  return transformedData\n}\n\nexport async function getAllSponsors(): Promise<Sponsor[]> {\n  const data = await fetchCmsAPI(`\n  {\n    CompanyItems(per_page: 100) {\n      items {\n        content {\n          name\n          description\n          slug\n          website {\n            url\n          }\n          callToAction\n          callToActionLink {\n            url\n          }\n          discord {\n            url\n          }\n          youtubeSlug\n          tier\n          links\n          cardImage {\n            url: filename\n          }\n          logo {\n            url: filename\n          }\n        }\n      }\n    }\n  }  \n  `);\n\n  const transformedData = transformResponse(data.CompanyItems.items)\n  return transformedData\n}\n\nexport async function getAllJobs(): Promise<Job[]> {\n  const data = await fetchCmsAPI(`\n    {\n      JobItems(per_page: 100) {\n        items {\n          content {\n            companyName\n            title\n            description\n            discord {\n              url\n            }\n            link {\n              url\n            }\n            rank\n          }\n        }\n      }\n    }\n  `);\n\n  const transformedData = transformResponse(data.JobItems.items)\n  return transformedData;\n}\n"]},"metadata":{},"sourceType":"module"}